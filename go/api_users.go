/*
 * sayhi web service
 *
 * A polite web service that always says hello
 *
 * API version: 1.0.0
 * Contact: marco.micera+sayhi@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package sayhi

import (
	"encoding/json"
	"fmt"
	"github.com/marcomicera/sayhi/go/stringutils"
	"net/http"
	"regexp"
	"strings"
	"time"
)

var GitCommit string
var ProjectName string

// Errors
var InvalidPersonNameErrorMessage = "Person name is invalid"
var SalutationInternalServerErrorErrorMessage = "The server tried to say hi, but an error occurred. Please do not take it personally."
var ProjectInfoInternalServerErrorErrorMessage = "An error occurred while retrieving this project's info"

func GetProjectInfo(w http.ResponseWriter, r *http.Request) {

	// Retrieving project information
	var info ProjectInfo
	info.GitHash = GitCommit
	info.ProjectName = ProjectName
	currentTime := time.Now()
	info.QueryTime = &currentTime

	// Building response message
	js, err := json.Marshal(info)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		_, _ = w.Write([]byte(ProjectInfoInternalServerErrorErrorMessage))
		return
	}
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	_, err = w.Write(js)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		_, _ = w.Write([]byte(ProjectInfoInternalServerErrorErrorMessage))
	}
}

func SayHi(w http.ResponseWriter, r *http.Request) {

	// Getting the right person's name
	person := "Stranger"
	if name, ok := r.URL.Query()["name"]; ok && strings.Join(name, " ") != "" {
		person = strings.Join(name, " ")

		r, _ := regexp.Compile("^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$")
		if !r.MatchString(person) {
			w.WriteHeader(http.StatusBadRequest)
			_, _ = w.Write([]byte(InvalidPersonNameErrorMessage))
			return
		}

		var err error
		person, err = stringutils.SplitCamelCasePersonName(person)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			_, _ = w.Write([]byte(InvalidPersonNameErrorMessage))
			return
		}
	}

	// Building response message
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	_, err := fmt.Fprintf(w, "Hello %s", person)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		_, _ = w.Write([]byte(SalutationInternalServerErrorErrorMessage))
	}
}
